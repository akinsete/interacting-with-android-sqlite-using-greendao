package com.appsng.greendaoapp.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ASSET".
*/
public class AssetDao extends AbstractDao<Asset, Long> {

    public static final String TABLENAME = "ASSET";

    /**
     * Properties of entity Asset.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, int.class, "name", false, "NAME");
        public final static Property Location = new Property(2, String.class, "location", false, "LOCATION");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
        public final static Property Request_id = new Property(4, long.class, "request_id", false, "REQUEST_ID");
    }

    private Query<Asset> request_AssetsQuery;

    public AssetDao(DaoConfig config) {
        super(config);
    }
    
    public AssetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ASSET\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" INTEGER NOT NULL ," + // 1: name
                "\"LOCATION\" TEXT," + // 2: location
                "\"ADDRESS\" TEXT," + // 3: address
                "\"REQUEST_ID\" INTEGER NOT NULL );"); // 4: request_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ASSET\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Asset entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getName());
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(3, location);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
        stmt.bindLong(5, entity.getRequest_id());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Asset entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getName());
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(3, location);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
        stmt.bindLong(5, entity.getRequest_id());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Asset readEntity(Cursor cursor, int offset) {
        Asset entity = new Asset( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // location
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // address
            cursor.getLong(offset + 4) // request_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Asset entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getInt(offset + 1));
        entity.setLocation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRequest_id(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Asset entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Asset entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Asset entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "assets" to-many relationship of Request. */
    public List<Asset> _queryRequest_Assets(long request_id) {
        synchronized (this) {
            if (request_AssetsQuery == null) {
                QueryBuilder<Asset> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Request_id.eq(null));
                request_AssetsQuery = queryBuilder.build();
            }
        }
        Query<Asset> query = request_AssetsQuery.forCurrentThread();
        query.setParameter(0, request_id);
        return query.list();
    }

}
